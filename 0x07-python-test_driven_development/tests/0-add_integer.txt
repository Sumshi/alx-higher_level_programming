The ``add two integer`` module
======================

Using ``add_integer``
-------------------

"""importing the function from module"""
>>> add_integer = __import__('0-add_integer').add_integer

"""Checking for module docstring:"""
>>> m = __import__("0-add_integer").__doc__
>>> len(m) > 1
True

"""Checking for function docstring:"""
>>> f = __import__("0-add_integer").add_integer.__doc__
>>> len(f) > 1
True

"""checking for regular addition"""
>>> add_integer(5,2)
7
>>> add_integer(1.0, 2.1)
3
>>> add_integer(0, 10)
10

"""checking positive and negative addition"""
>>> add_integer(2, -3)
-1

"""checking negative and positive addition"""
>>> add_integer(-6, 8)
2

>>> add_integer(.1)
98

>>> add_integer(-1,1)
0
>>> add_integer(1)
99

"""checking float with int addition"""
>>> add_integer(2.1, 4)
6

"""int with float addition"""
>>> add_integer(2, 3.3)
5

"""float addition"""
>>> add_integer(2.12, 3.34)
5

""" ERRORS """

"""pass a non integer, a string"""
>>> add_integer("sumaya", 2)
Traceback (most recent call last):
...
TypeError: a must be an integer


"""pass in a list"""
>>> add_integer([0], {})
Traceback (most recent call last):
...
TypeError: a must be an integer


"""pass in a string for b"""
>>> add_integer(5, "terry")
Traceback (most recent call last):
...
TypeError: b must be an integer


"""pass in nothing"""
>>> add_integer(None)
Traceback (most recent call last):
...
TypeError: a must be an integer


"""converting float infinititties to int errors"""
>>> add_integer(float('inf'), 2)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer


"""converting float NaN to int errors"""
>>> add_integer(float('NaN'), 2)
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
